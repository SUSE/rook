---
# Create a service account for the kube registry
# Limit it to the kube-system namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-registry
  namespace: kube-system
---
# Create a pod security policy  (psp) for the service account
# that is as minimal as possible.
# TODO: This almost definitely isn't minimal
apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  name: kube-registry.psp
  # TODO: can the psp be limited to the namespace?
spec:
  fsGroup:
    rule: RunAsAny
  privileged: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - flexVolume
  - secret
  allowedFlexVolumes:
  - driver: "ceph.rook.io/rook"
  - driver: "ceph.rook.io/rook-ceph"
  hostPID: false
  hostIPC: false
  hostNetwork: false
---
# Create a role for the kube-registry that can use
# the security policy
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: kube-registry:psp
  namespace: kube-system
rules:
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  resourceNames:
  - kube-registry.psp
  verbs:
  - use
---
# Bind the role to the service account so that all pods
# created by controllers in in the service account can
# create the resources allowed by the psp
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kube-registry:psp
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kube-registry:psp
subjects:
- kind: ServiceAccount
  name: kube-registry
  namespace: kube-system
---
# Create the HA registry
apiVersion: v1
kind: ReplicationController
metadata:
  name: kube-registry-v0
  namespace: kube-system
  labels:
    k8s-app: kube-registry
    version: v0
    kubernetes.io/cluster-service: "true"
spec:
  replicas: 2
  selector:
    k8s-app: kube-registry
    version: v0
  template:
    metadata:
      labels:
        k8s-app: kube-registry
        version: v0
        kubernetes.io/cluster-service: "true"
    spec:
      # Use the registry's service account so that we can use flexVolumes
      serviceAccount: kube-registry
      serviceAccountName: kube-registry
      containers:
      - name: registry
        image: registry:2
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
        env:
        - name: REGISTRY_HTTP_ADDR
          value: :5000
        - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
          value: /var/lib/registry
        volumeMounts:
        - name: image-store
          mountPath: /var/lib/registry
        ports:
        - containerPort: 5000
          name: registry
          protocol: TCP
      volumes:
      - name: image-store
        flexVolume:
          driver: ceph.rook.io/rook
          fsType: ceph
          options:
            fsName: myfs # name of the filesystem specified in the filesystem CRD.
            clusterNamespace: rook-ceph # namespace where the Rook cluster is deployed
            # by default the path is /, but you can override and mount a specific path of the filesystem by using the path attribute
            # the path must exist on the filesystem, otherwise mounting the filesystem at that path will fail
            # path: /some/path/inside/cephfs
            # (Optional) Specify an existing Ceph user that will be used for mounting storage with this StorageClass.
            #mountUser: user1
            # (Optional) Specify an existing Kubernetes secret name containing just one key holding the Ceph user secret.
            # The secret must exist in each namespace(s) where the storage will be consumed.
            #mountSecret: ceph-user1-secret
